{{- if .Values.global.deploy.cosmos }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: cosmos
  name: cosmos
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.global.service.cosmos.app.replicas | default .Values.global.service.replicas }} 
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: cosmos
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: cosmos
    spec:
      terminationGracePeriodSeconds: {{ .Values.global.service.terminationGracePeriodSeconds | default 30 }}
      {{- with .Values.global.service.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.service.cosmos.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.service.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if index .Values.global.service .Chart.Name "dependencies" }}
      initContainers:
        {{- range $depName, $dep := index .Values.global.service .Chart.Name "dependencies" }}
        - name: wait-for-{{ $depName }}
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z -w 2 {{ $dep.host | default (printf "%s.%s.svc.cluster.local" $depName $.Release.Namespace) }} {{ $dep.port }}; do
                echo "Waiting for {{ $depName }} to be ready..."
                sleep 2
              done
              echo "{{ $depName }} is ready!"
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
            limits:
              cpu: "50m"
              memory: "32Mi"
        {{- end }}
      {{- end }}
      containers:
        - name: cosmos
          imagePullPolicy: {{ .Values.global.service.imagePullPolicy | quote }}
          image: {{ .Values.global.service.cosmos.app.image }}:{{ .Values.global.service.cosmos.app.tag | default .Values.global.service.tag }}
          envFrom:
            - secretRef:
                name: {{ .Values.global.service.secretName | quote }}
          ports:
            - containerPort: {{ .Values.global.service.cosmos.app.port | default 80 }}
              name: cosmos
              protocol: TCP
          resources:
            {{- toYaml .Values.global.service.cosmos.app.resources | default .Values.global.service.resources | nindent 12 }}
          livenessProbe:
            tcpSocket:
              port: 8085
            initialDelaySeconds: 120
            timeoutSeconds: 5
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 60
          readinessProbe:
            tcpSocket:
              port: 8085
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 60
{{- end }}